"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("./common");
var utils = require("./utils/utils");
var GoogleSheet = (function (_super) {
    __extends(GoogleSheet, _super);
    function GoogleSheet(authClass, spreadsheetId, sheetId) {
        if (sheetId === void 0) { sheetId = 0; }
        var _this = _super.call(this, authClass, spreadsheetId, sheetId) || this;
        _this.spreadsheetId = spreadsheetId;
        _this.sheetId = sheetId;
        return _this;
    }
    GoogleSheet.prototype.getData = function (options, callback) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (callback === void 0) { callback = utils.noop; }
        if (typeof options === "function") {
            callback = options;
            options = {};
        }
        options.range || (options.range = {});
        var range = options.range, sheetTitle = options.sheetTitle, params = __rest(options, ["range", "sheetTitle"]);
        var ranges = utils.forceArray(range);
        if (ranges.length === 0) {
            return callback(null);
        }
        var batchGet = function (err, res) {
            if (err) {
                return callback(err);
            }
            var A1notations = ranges.map(function (elem) { return utils.getA1Notation(__assign({}, elem, { sheetTitle: res.sheetTitle })); });
            _this.api.valuesBatchGet(__assign({ ranges: A1notations, spreadsheetId: _this.spreadsheetId }, options), callback);
        };
        if (options.sheetTitle) {
            return batchGet(null, {
                sheetId: this.sheetId,
                sheetTitle: options.sheetTitle,
            });
        }
        this.getSheetTitle(batchGet);
    };
    GoogleSheet.prototype.setData = function (data, options, callback) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (callback === void 0) { callback = utils.noop; }
        if (typeof options === "function") {
            callback = options;
            options = {};
        }
        options.range || (options.range = {});
        var _a = options, range = _a.range, sheetTitle = _a.sheetTitle, params = __rest(_a, ["range", "sheetTitle"]);
        var isRangeArr = Array.isArray(range);
        var isDataArr = Array.isArray(data[0][0]);
        if (isRangeArr !== isDataArr || (isRangeArr && range.length !== data.length)) {
            return callback(new Error("Range and Data should be consistent!"));
        }
        var ranges = utils.forceArray(range);
        if (ranges.length === 0) {
            return callback(null);
        }
        var batchUpdate = function (err, res) {
            if (err) {
                return callback(err);
            }
            var resourceData = [];
            for (var i = 0; i < data.length; ++i) {
                resourceData.push({
                    range: utils.getA1Notation(__assign({}, ranges[i], { sheetTitle: res.sheetTitle })),
                    majorDimension: params.majorDimension,
                    values: data[i],
                });
            }
            _this.api.valuesBatchUpdate({
                spreadsheetId: _this.spreadsheetId,
                resource: {
                    valueInputOption: "USER_ENTERED",
                    data: resourceData,
                },
            }, callback);
        };
        if (options.sheetTitle) {
            return batchUpdate(null, {
                sheetId: this.sheetId,
                sheetTitle: options.sheetTitle,
            });
        }
        this.getSheetTitle(batchUpdate);
    };
    return GoogleSheet;
}(common_1.Common));
exports.GoogleSheet = GoogleSheet;
//# sourceMappingURL=google-sheet.js.map