"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var google = require("googleapis");
var utils_1 = require("./utils/utils");
var googlesheets = google.sheets("v4");
var API = (function () {
    function API(authClass) {
        this.authClass = authClass;
    }
    API.prototype.get = function (params, options, callback) {
        if (callback === void 0) { callback = utils_1.noop; }
        if (typeof options === "function") {
            callback = options;
            options = undefined;
        }
        this.authClass.ensureValid(function (err, authClient) {
            if (err) {
                return callback(err);
            }
            googlesheets.spreadsheets.get(__assign({}, params, { auth: authClient }), options, callback);
        });
    };
    API.prototype.batchUpdate = function (params, options, callback) {
        if (callback === void 0) { callback = utils_1.noop; }
        if (typeof options === "function") {
            callback = options;
            options = undefined;
        }
        this.authClass.ensureValid(function (err, authClient) {
            if (err) {
                return callback(err);
            }
            googlesheets.spreadsheets.batchUpdate(__assign({}, params, { auth: authClient }), options, callback);
        });
    };
    API.prototype.copyTo = function (params, options, callback) {
        if (callback === void 0) { callback = utils_1.noop; }
        if (typeof options === "function") {
            callback = options;
            options = undefined;
        }
        this.authClass.ensureValid(function (err, authClient) {
            if (err) {
                return callback(err);
            }
            googlesheets.spreadsheets.sheets.copyTo(__assign({}, params, { auth: authClient }), options, callback);
        });
    };
    API.prototype.valuesBatchClear = function (params, options, callback) {
        if (callback === void 0) { callback = utils_1.noop; }
        if (typeof options === "function") {
            callback = options;
            options = undefined;
        }
        this.authClass.ensureValid(function (err, authClient) {
            if (err) {
                return callback(err);
            }
            googlesheets.spreadsheets.values.batchClear(__assign({}, params, { auth: authClient }), options, callback);
        });
    };
    API.prototype.valuesBatchGet = function (params, options, callback) {
        if (callback === void 0) { callback = utils_1.noop; }
        if (typeof options === "function") {
            callback = options;
            options = undefined;
        }
        this.authClass.ensureValid(function (err, authClient) {
            if (err) {
                return callback(err);
            }
            googlesheets.spreadsheets.values.batchGet(__assign({}, params, { auth: authClient }), options, callback);
        });
    };
    API.prototype.valuesBatchUpdate = function (params, options, callback) {
        if (callback === void 0) { callback = utils_1.noop; }
        if (typeof options === "function") {
            callback = options;
            options = undefined;
        }
        this.authClass.ensureValid(function (err, authClient) {
            if (err) {
                return callback(err);
            }
            googlesheets.spreadsheets.values.batchUpdate(__assign({}, params, { auth: authClient }), options, callback);
        });
    };
    API.prototype.valuesClear = function (params, options, callback) {
        if (callback === void 0) { callback = utils_1.noop; }
        if (typeof options === "function") {
            callback = options;
            options = undefined;
        }
        this.authClass.ensureValid(function (err, authClient) {
            if (err) {
                return callback(err);
            }
            googlesheets.spreadsheets.values.clear(__assign({}, params, { auth: authClient }), options, callback);
        });
    };
    API.prototype.valuesGet = function (params, options, callback) {
        if (callback === void 0) { callback = utils_1.noop; }
        if (typeof options === "function") {
            callback = options;
            options = undefined;
        }
        this.authClass.ensureValid(function (err, authClient) {
            if (err) {
                return callback(err);
            }
            googlesheets.spreadsheets.values.get(__assign({}, params, { auth: authClient }), options, callback);
        });
    };
    API.prototype.valuesUpdate = function (params, options, callback) {
        if (callback === void 0) { callback = utils_1.noop; }
        if (typeof options === "function") {
            callback = options;
            options = undefined;
        }
        this.authClass.ensureValid(function (err, authClient) {
            if (err) {
                return callback(err);
            }
            googlesheets.spreadsheets.values.update(__assign({}, params, { auth: authClient }), options, callback);
        });
    };
    return API;
}());
exports.API = API;
//# sourceMappingURL=api.js.map