"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("./api");
var utils = require("./utils/utils");
var constants_1 = require("./constants");
var errors_1 = require("./utils/errors");
var Common = (function () {
    function Common(authClass, spreadsheetId, sheetId, rowIndex, colIndexOrDimension) {
        if (colIndexOrDimension === void 0) { colIndexOrDimension = "ROW"; }
        this.spreadsheetId = spreadsheetId;
        this.sheetId = sheetId;
        this.rowIndex = rowIndex;
        if (this.rowIndex) {
            if (colIndexOrDimension === "COLUMN") {
                this.dimension = "COLUMN";
                this.colIndex = this.rowIndex;
                this.rowIndex = undefined;
            }
            else if (colIndexOrDimension === "ROW") {
                this.dimension = "ROW";
            }
            else {
                this.colIndex = colIndexOrDimension;
            }
        }
        this.api = new api_1.API(authClass);
    }
    Common.prototype.getSheetTitle = function (callback) {
        var _this = this;
        if (callback === void 0) { callback = utils.noop; }
        this.getInfo(function (err, res) {
            if (err) {
                return callback(err);
            }
            if (!_this.sheetId) {
                return callback(err, res.sheets.map(function (elem) { return ({
                    sheetId: elem.properties.sheetId,
                    sheetTitle: elem.properties.title,
                }); }));
            }
            var sheet = utils.find(res.sheets, (function (elem) { return (elem.properties.sheetId === _this.sheetId); }));
            if (!sheet) {
                return callback(new errors_1.InvalidSheetId());
            }
            callback(err, {
                sheetId: sheet.properties.sheetId,
                sheetTitle: sheet.properties.title,
            });
        });
    };
    Common.prototype.getInfo = function (callback) {
        var _this = this;
        if (callback === void 0) { callback = utils.noop; }
        this.api.get({
            spreadsheetId: this.spreadsheetId,
            fields: constants_1.INFO_FIELDS,
        }, function (err, res) {
            if (err || !_this.sheetId) {
                return callback(err, res);
            }
            var sheet = utils.find(res.sheets, (function (elem) { return (elem.properties.sheetId === _this.sheetId); }));
            if (!sheet) {
                return callback(new errors_1.InvalidSheetId());
            }
            res.sheets = [sheet];
            callback(err, res);
        });
    };
    return Common;
}());
exports.Common = Common;
//# sourceMappingURL=common.js.map