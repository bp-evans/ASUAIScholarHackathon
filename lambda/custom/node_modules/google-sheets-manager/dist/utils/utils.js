"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
exports.numToAlpha = function fNumToAlpha(num) {
    var str = "";
    while (num) {
        str += String.fromCharCode("A".charCodeAt(0) + --num % 26);
        num = Math.floor(num / 26);
    }
    return str.split("").reverse().join("");
};
exports.alphaToNum = function fAlphaToNum(str) {
    var num = 0;
    for (var i = 0; i < str.length; ++i) {
        num = num * 26 + (str.charCodeAt(i) - "A".charCodeAt(0)) + 1;
    }
    return num;
};
exports.getA1Notation = function fGetA1Notation(range) {
    var stRow = range.startRow || 1;
    var stCol = exports.numToAlpha(range.startCol || 1);
    var enRow = range.endRow || "";
    var enCol = exports.numToAlpha(range.endCol || constants_1.MAX_SHEET_COLUMNS);
    var title = range.sheetTitle || "";
    var str = title + "!" + stCol + stRow + ":" + enCol + enRow;
    if (str[str.length - 1] === ":") {
        str = str.slice(0, str.length - 1 - Number(str[str.length - 2] === "!"));
    }
    if (str[0] === "!") {
        str = str.slice(1, str.length);
    }
    return str;
};
exports.forceLength = function fForceLength(arr, length, placeholder) {
    if (placeholder === void 0) { placeholder = ""; }
    if (arr.length > length) {
        return arr.slice(0, length);
    }
    return arr.concat(new Array(length - arr.length).map(function (i) { return placeholder; }));
};
exports.forceArray = function fForceArray(val) {
    if (Array.isArray(val)) {
        return val;
    }
    if (!val) {
        return [];
    }
    return [val];
};
exports.xmlSafeValue = function fXMLSafeValue(val) {
    if (val == null) {
        return "";
    }
    return String(val).replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/\n/g, "&#10;")
        .replace(/\r/g, "&#13;");
};
exports.xmlSafeColumnName = function fXMLSafeColumnName(val) {
    if (!val) {
        return "";
    }
    return String(val).replace(/[\s_]+/g, "").toLowerCase();
};
exports.find = function fFind(arr, func) {
    for (var elem in arr) {
        if (func(arr[elem])) {
            return arr[elem];
        }
    }
};
exports.noop = function fNoop(err, res) { };
//# sourceMappingURL=utils.js.map